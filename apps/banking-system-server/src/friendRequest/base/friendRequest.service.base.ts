/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FriendRequest as PrismaFriendRequest } from "@prisma/client";

export class FriendRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FriendRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.friendRequest.count(args);
  }

  async friendRequests(
    args: Prisma.FriendRequestFindManyArgs
  ): Promise<PrismaFriendRequest[]> {
    return this.prisma.friendRequest.findMany(args);
  }
  async friendRequest(
    args: Prisma.FriendRequestFindUniqueArgs
  ): Promise<PrismaFriendRequest | null> {
    return this.prisma.friendRequest.findUnique(args);
  }
  async createFriendRequest(
    args: Prisma.FriendRequestCreateArgs
  ): Promise<PrismaFriendRequest> {
    return this.prisma.friendRequest.create(args);
  }
  async updateFriendRequest(
    args: Prisma.FriendRequestUpdateArgs
  ): Promise<PrismaFriendRequest> {
    return this.prisma.friendRequest.update(args);
  }
  async deleteFriendRequest(
    args: Prisma.FriendRequestDeleteArgs
  ): Promise<PrismaFriendRequest> {
    return this.prisma.friendRequest.delete(args);
  }
}
